export declare enum BuildFormat {
    CJS = "cjs",
    ESM = "esm",
    IIFE = "iife",
    UMD = "umd"
}
export interface BundleOptions {
    readonly css?: boolean;
    readonly exclude?: readonly string[];
}
export declare enum BuildTarget {
    ES5 = "es5",
    ES6 = "es6",
    ES2015 = "es2015",
    ES2016 = "es2016",
    ES2017 = "es2017",
    ES2018 = "es2018",
    ES2019 = "es2019",
    ES2020 = "es2020",
    ES2021 = "es2021",
    ES2022 = "es2022",
    ESNext = "esnext",
    Latest = "latest"
}
export declare enum BuildTool {
    ESBuild = "esbuild",
    Vite = "vite"
}
export declare enum BuildPlatform {
    Browser = "browser",
    Node = "node"
}
export declare type BuildOptions = {
    readonly assets?: {
        readonly directory?: string;
        readonly public?: boolean;
    };
    readonly bundle?: boolean | BundleOptions;
    readonly configPath?: string;
    readonly format?: BuildFormat;
    readonly formats?: readonly BuildFormat[];
    readonly input?: {
        readonly directory: string;
        readonly file?: string;
        readonly files?: readonly string[];
    };
    readonly library?: boolean | {
        readonly name: string;
    };
    readonly manifest?: boolean;
    readonly minify?: boolean;
    readonly output?: {
        readonly clean?: boolean;
        readonly directory: string;
        readonly file?: string;
    };
    readonly platform?: BuildPlatform;
    readonly rootDir?: string;
    readonly sourcemap?: boolean;
    readonly splitting?: boolean;
    readonly target?: BuildTarget;
    readonly tool: BuildTool;
    readonly treeShaking?: boolean;
    readonly types?: boolean | {
        readonly configPath?: string;
    };
    readonly webApp?: {
        readonly react?: boolean;
        readonly ssr?: boolean;
    };
};
export interface ESBuildOptions extends Omit<BuildOptions, 'formats' | 'tool'> {
    readonly format?: BuildFormat.CJS | BuildFormat.ESM | BuildFormat.IIFE;
}
export interface ViteBuildOptions extends Omit<BuildOptions, 'format' | 'splitting' | 'tool' | 'treeShaking'> {
    readonly format?: BuildFormat.CJS | BuildFormat.ESM | BuildFormat.IIFE | BuildFormat.UMD;
    readonly optimize?: {
        readonly exclude?: string[];
        readonly include?: string[];
    };
}
//# sourceMappingURL=build.d.ts.map